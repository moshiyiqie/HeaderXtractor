#加入*i*i修正，越往后的分类器修正权重越大

<type 'numpy.ndarray'>
采样长度: 4841
采样: [[ 0.          0.6         0.         ...,  0.          1.          0.        ]
 [ 0.          1.          0.         ...,  0.          1.          0.        ]
 [ 0.          0.25        0.         ...,  0.          1.          0.        ]
 ...,
 [ 0.          0.66666667  0.         ...,  1.          0.5         0.        ]
 [ 0.          0.21052632  1.         ...,  0.          0.66666667  0.        ]
 [ 0.          0.16666667  0.         ...,  0.          0.83333333  0.        ]]
用2算法
<type 'numpy.ndarray'>
采样长度: 8067
采样: [[ 1.          0.66666667  0.         ...,  0.          0.5         0.        ]
 [ 0.          0.4         0.         ...,  0.          1.          0.        ]
 [ 0.          0.41666667  2.         ...,  0.          0.44444444  2.        ]
 ...,
 [ 1.          0.44444444  0.         ...,  0.          0.5         0.        ]
 [ 1.          0.75        0.         ...,  0.          0.4         0.        ]
 [ 0.          1.          0.         ...,  0.          0.5         0.        ]]
用1算法
<type 'numpy.ndarray'>
采样长度: 9078
采样: [[ 0.          0.22222222  0.         ...,  0.          1.          0.        ]
 [ 0.          0.14285714  0.         ...,  0.          0.5         0.        ]
 [ 0.          0.31578947  0.         ...,  2.          0.5         0.        ]
 ...,
 [ 0.          1.          0.         ...,  0.          0.33333333  0.        ]
 [ 0.          0.5         0.         ...,  0.          1.          0.        ]
 [ 0.          0.1875      0.         ...,  0.          0.5         0.        ]]
用4算法
<type 'numpy.ndarray'>
采样长度: 3993
采样: [[ 0.          0.25        0.         ...,  1.          1.          0.        ]
 [ 5.          0.5         0.         ...,  0.          0.54545455  0.        ]
 [ 1.          0.4         0.         ...,  0.          0.66666667  0.        ]
 ...,
 [ 0.          1.          0.         ...,  0.          1.          0.        ]
 [ 0.          0.          0.         ...,  0.          1.          0.        ]
 [ 0.          0.5         0.         ...,  0.          0.5         0.        ]]
用1算法
<type 'numpy.ndarray'>
采样长度: 2474
采样: [[ 1.          0.5         0.         ...,  0.          0.66666667  0.        ]
 [ 0.          1.          0.         ...,  0.          0.33333333  0.        ]
 [ 0.          0.2         0.         ...,  0.          1.          0.        ]
 ...,
 [ 0.          1.          0.         ...,  0.          0.5         0.        ]
 [ 3.          0.71428571  0.         ...,  0.          0.375       0.        ]
 [ 2.          0.75        0.         ...,  1.          0.25        0.        ]]
用3算法
正在处理第0个分类器
W sum 1.0
sg, [-1. -1. -1. ..., -1. -1. -1.]
self.y_test, [-1. -1. -1. ..., -1. -1. -1.]
e value: 0.0396981132075
alpha  1.59297202007
sum: [-1.59297202 -1.59297202 -1.59297202 ..., -1.59297202 -1.59297202
 -1.59297202]
错误数: 526
             precision    recall  f1-score   support

       -1.0       0.98      0.98      0.98     12556
        1.0       0.63      0.59      0.61       694

avg / total       0.96      0.96      0.96     13250

正在处理第1个分类器
W sum 1.0
sg, [-1. -1. -1. ..., -1. -1. -1.]
self.y_test, [-1. -1. -1. ..., -1. -1. -1.]
e value: 0.164796803263
alpha  3.24592365005
sum: [-4.83889567 -4.83889567 -4.83889567 ..., -4.83889567 -4.83889567
 -4.83889567]
错误数: 321
             precision    recall  f1-score   support

       -1.0       0.99      0.99      0.99     12556
        1.0       0.79      0.73      0.76       694

avg / total       0.98      0.98      0.98     13250