Author Retrospective for -><title>
Code Scheduling and Register Allocation in Large Basic -><title>
Blocks -><title>
James R. Goodman -><author>
Emeritus Professor, -><affiliation>
Computer Sciences Department -><affiliation>
University of Wisconsin-Madison -><affiliation>
Wei Chung Hsu -><author>
Department of CSIE -><affiliation>
National Taiwan University -><affiliation>
Taipei, Taiwan, R.O.C. -><address>
hsuwc@csie.ntu.edu.tw -><email>
In 1987 we were working at the University of Wisconsin- -><abstract>
Madison with Jim Smith, JT Hsieh, Koujuch Liou and An- -><abstract>
drew Pleszkun on PIPE[4], an unorthodox ”decoupled access- -><abstract>
execute processor.” The driving innovation of PIPE was the -><abstract>
separation of instructions dealing with memory through a -><abstract>
separate and independent instruction stream racing ahead, -><abstract>
initiating load and store instructions in-order, synchronized -><abstract>
only with other instructions through architectural queues. -><abstract>
The queues eliminated the need for allocating and manag- -><abstract>
ing temporary registers. -><abstract>
While the problems of register allocation and instruction -><abstract>
scheduling were traditionally treated independently, the gen- -><abstract>
esis of this paper came while developing an optimizing com- -><abstract>
piler for PIPE, with the insight that in a conventional archi- -><abstract>
tecture these two closely related problems have conflicting -><abstract>
goals that could be played off against each other to maximize -><abstract>
benefit: Code scheduling uses as many temporary registers -><abstract>
as possible to achieve a higher level of instruction-level par- -><abstract>
allelism (ILP), while register allocation minimizes the use -><abstract>
of temporary registers so that more data items could be -><abstract>
allocated to the available registers. As we gained more ex- -><affiliation>
perience in optimizing for parallel programs, we came to -><abstract>
